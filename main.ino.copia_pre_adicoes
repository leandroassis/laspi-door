#include <SPI.h>
#include <MFRC522.h>
#include <EEPROM.h>
 
#define SS_PIN      10          // Chip Enable do sensor rfid    
#define RST_PIN     9           // Reset do sensor rfid
#define RELAY_PIN   4           // Pino de acionar a relé
#define ADD_CARD    2           // Pino para entrar em modo de cadastro
#define HIGH_PIN    5           //`Pino de suporte para modo de cadastro
#define REED_SWITCH             // Não implementado atualmente
#define BUZZER      1           // Não implementado atualmente  
#define INTERRUP    3           // Pino de conexão com o clock do 555
#define KEEP_PIN    6           // Pino de saída de sinal do arduino para manter circuito de redundância
#define RELAY2     A0
#define RED        A5
#define BLUE       A4
#define GREEN      A3

#define TAG_COUNT 80            // Quantidade de cartões possíveis de implementar (MAX: 230)
 
MFRC522 rfid(SS_PIN, RST_PIN);  

String tags_temp[TAG_COUNT];    // Vetor de tags que é carregado com as tags salvas na eeprom
int contador = 0;
String temp = "";
int free_address = 1023;       // Contador do último endereço livre
int contador_blank = 0;

void setup() {
  Serial.begin(9600);
  SPI.begin();
  rfid.PCD_Init();             // Inicia o sensor RFID
  pinMode(RELAY_PIN, OUTPUT); 
  pinMode(ADD_CARD, INPUT);
  pinMode(HIGH_PIN, OUTPUT);
  // pinMode(REED_SWITCH, INPUT);
  pinMode(BUZZER, OUTPUT);
  pinMode(INTERRUP, INPUT); 
  pinMode(KEEP_PIN, OUTPUT);
  pinMode(RELAY2, OUTPUT);

  pinMode(A2, OUTPUT);
  pinMode(RED, OUTPUT);
  pinMode(BLUE, OUTPUT);
  pinMode(GREEN, OUTPUT);
  
  digitalWrite(RELAY_PIN, LOW); // Porta trancada
  digitalWrite(RELAY2, LOW); // Porta trancada
  digitalWrite(HIGH_PIN, HIGH); // Pino para cadastro de tags
  digitalWrite(BUZZER, LOW); // Buzzer sem som
  digitalWrite(KEEP_PIN, HIGH); // Inicia pulso do arduino em 5V
  digitalWrite(RED, LOW);
  digitalWrite(BLUE, HIGH);
  digitalWrite(GREEN, LOW);

  attachInterrupt(digitalPinToInterrupt(INTERRUP), KeepRelayAlive, CHANGE); // O arduino segue o clock do 555
  
  EEPROMDump(); // Dumpa as tags da eeprom para o vetor tags_temp

  if(contador_blank == TAG_COUNT){  // Caso a memória inteira esteja com 0xFF, o endereço 0 da eeprom (que armazena o próximo endereço a escrever) recebe 1
    EEPROM.write(0, 1);
    contador_blank = 0;
  }

  // for(int i = 0; i < 1024; i++) EEPROM.write(i, 0xFF);
}
 
void loop() {
  bool RFID_Found; // Variável auxiliar para controle de interface do usuário

  RFID_Found = false; 
  
  if(!rfid.PCD_PerformSelfTest()){
    // Performa self test no sensor RFID, caso falhe a porta é mantida aberta
    while(1)digitalWrite(RELAY_PIN, HIGH);
    digitalWrite(RELAY2, HIGH);
  }
  
  if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) return; // Enquanto uma tag não for lida pelo sensor o loop é reiniciado
  
  String strID = "";
  for (byte i = 0; i < 4; i++) {
    strID += String(rfid.uid.uidByte[i], HEX); // Realiza o parser da tag lida pelo sensor em um string
  }
  strID.toUpperCase();
    
  if(digitalRead(ADD_CARD)) writeTagInEEPROM(strID);  // Se o pino 2 estiver em HIGH os cartoes sao salvos na eeprom

  for(int i = 0; i < TAG_COUNT; i++){
    if(strID == tags_temp[i]){ // Se a tag estiver no vetor de tags (foi cadastrada previamente) a porta abre
      RFID_Accepted();
      RFID_Found = true;
      break;
    }
  }

  if(!RFID_Found) RFID_Rejected();
  
  rfid.PICC_HaltA();
  rfid.PCD_StopCrypto1();
}

void RFID_Rejected(){
  // Controle do som da buzzer caso a tag RFID não seja encontrado
  digitalWrite(RED, HIGH);
  digitalWrite(BLUE, LOW);
  digitalWrite(GREEN, LOW);
  delay(2500);
  digitalWrite(RED, LOW);
  digitalWrite(BLUE, HIGH);
  digitalWrite(GREEN, LOW);
}

void RFID_Accepted(){
  // Controle do som da buzzer caso a tag RFID seja encontrada
    // Abre a porta por 5000 us
  digitalWrite(RELAY_PIN, HIGH); 
  digitalWrite(RELAY2, HIGH);
  digitalWrite(GREEN, HIGH);
  digitalWrite(RED, LOW);
  digitalWrite(BLUE, LOW);
  delay(5500);
  digitalWrite(RELAY_PIN, LOW);
  digitalWrite(RELAY2, LOW);   
  digitalWrite(GREEN, HIGH);
  digitalWrite(RED, LOW);
  digitalWrite(BLUE, HIGH);
}

void writeTagInEEPROM(String ID){
  // Função para parsear a String ID em 4 bytes e escreve-os em endereços consecutivos na EEPROM
    byte temp_byte;
    char temp_char[2];
    free_address = EEPROM.read(0);
    
    if(free_address >= 1017){
      Serial.println("A eeprom ja está com 127 tags. Memória cheia.");
      return;
    }
    
    Serial.println(ID);
    digitalWrite(RED, LOW);
    digitalWrite(GREEN, LOW);

    for(int i = 0; i < 5; i++){
      digitalWrite(BLUE, !digitalRead(BLUE));
      delay(500);
    }

    for(int i = 0; i < TAG_COUNT; i++){
      if(ID == tags_temp[i]) return;
    }
   
    for(int i = 0; i < 8; i+=2){
      temp_char[0] = ID[i];
      temp_char[1] = ID[i+1];
      temp_byte = strtoul(temp_char, NULL, 16);
      EEPROM.write(free_address, temp_byte);
      free_address++;
    }

    // Após parsear e escrever a tag na EEPROM, salva no endereço 0 o próximo endereço livre e faz o dump da EEPROM para o vetor tag_temp
    EEPROM.write(0, free_address);
    EEPROMDump();
    for(int i = 0; i < TAG_COUNT; i++) Serial.println(tags_temp[i]);
    
    digitalWrite(BLUE, LOW);
    digitalWrite(GREEN, HIGH);
    digitalWrite(RED, LOW);
    delay(1000);
    digitalWrite(BLUE, HIGH);
    digitalWrite(GREEN, LOW);
    digitalWrite(RED, LOW);
}

void EEPROMDump(){
  // le todos os 1024 endereços da eeprom, faz o parser (monta uma tag a cada 4 bytes lidos) e copia para o vetor tags_temp
  for(int j = 0; j < TAG_COUNT; j++) tags_temp[j] = "";
  
  for(int i = 1; i <= 4*TAG_COUNT; i++){ // Dumpa a EEPROM em um array para evitar consultas excessivas    
    contador++;
    temp += String(EEPROM.read(i), HEX);
    if(contador == 4){
      contador = 0;
      temp.toUpperCase();
      if(temp == "FFFFFFFF") contador_blank++;
      tags_temp[i/4 - 1] = temp;
      Serial.print(temp);
      Serial.print("  ");
      Serial.print(i);
      Serial.print("\n");
      temp = "";
    }  
  }
}

void KeepRelayAlive(){
  // Toda vez que o vetor de interrupção for chamado, o valor no pino KEEP é invertido
  digitalWrite(KEEP_PIN, !digitalRead(KEEP_PIN));
}
